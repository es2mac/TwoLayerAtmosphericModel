import("types.nools");
import("helperFunctions.nools");



// Debugging: Which Step to start at
// >1 will skip Step 1, >2 will skip Step 1 & 2
global DEBUG_STEP = 1;

rule Bootstrap {
    when {
        bool : Boolean bool == false from false;
    }
    then {
        // Create Problem
        let problem = assert(new Problem("twoLayers"));

        // Step 1 diagram buttons
        assert(new InterfaceElement(SPACE));
        assert(new InterfaceElement(SUN));
        assert(new InterfaceElement(LAYER2));
        assert(new InterfaceElement(LAYER1));
        assert(new InterfaceElement(SURFACE));

        // Step 1 other buttons
        assert(new InterfaceElement("step1-finish"));
        assert(new InterfaceElement("step1-go-to-step2"));
        assert(new TPA("step1-go-to-step2", "SetVisible", false));

        // Step 1 all arrows
        let arrows = [
            assert(new Arrow("arrow1", SUN, SURFACE, "S(1-α)/4" )),
            assert(new Arrow("arrow2", SURFACE, LAYER1, "σTs^4" )),
            assert(new Arrow("arrow3", LAYER1, SURFACE, "σT1^4" )),
            assert(new Arrow("arrow4", LAYER1, LAYER2, "σT1^4" )),
            assert(new Arrow("arrow5", LAYER2, LAYER1, "σT2^4" )),
            assert(new Arrow("arrow6", LAYER2, SPACE, "σT2^4" ))
        ];
        for (arrow of arrows) {
            assert(new InterfaceElement(arrow.ieEnergyBox));
            assert(new InterfaceElement(arrow.ieEnergyText));
            assert(new TPA(arrow.name, "SetVisible", false));
            assert(new TPA(arrow.ieEnergyBox, "SetVisible", false));
            assert(new TPA(arrow.ieEnergyText, "SetVisible", false));
        }

        // Step 2 all equations
        let equations = [
            assert(new BalanceEquation(CV_SURFACE, ["arrow1", "arrow3"], ["arrow2"])),
            assert(new BalanceEquation(CV_LAYER1, ["arrow2", "arrow5"], ["arrow3", "arrow4"])),
            assert(new BalanceEquation(CV_LAYER2, ["arrow4"], ["arrow5", "arrow6"]))
        ];

        // Step 2 elements
        assert(new ControlVolumeElement(CV_SURFACE));
        assert(new ControlVolumeElement(CV_LAYER1));
        assert(new ControlVolumeElement(CV_LAYER2));
        assert(new TPA(CV_SURFACE, "SetVisible", false));
        assert(new TPA(CV_LAYER1, "SetVisible", false));
        assert(new TPA(CV_LAYER2, "SetVisible", false));

        // Step 2 other buttons
        assert(new InterfaceElement("step2-thats-all"));
        assert(new InterfaceElement("add-equation"));
        assert(new InterfaceElement("solve-equations"));
        $("#add-equation").hide();

        $("#step2-answer-box").hide();
        assert(new TPA("step2-go-to-step3", "SetVisible", false));

        // CTAT settings
        setProblemAttribute("use_backtracking", true);
        setProblemAttribute("prune_old_activations", true);
        // setProblemAttribute("substitute_input", true);

        // Debug: skip steps
        if (DEBUG_STEP > 1) {
            fakeCompleteStep1(problem, arrows);
        }


        switchToTab(1);

        halt();
    }
}

//////////////////////////
//        Step 1        //
//////////////////////////

rule SelectTransferFromBody {
    when {
        p: Problem p.subgoal == "selectTransferBodies" && !p.selectedFromBody;
        ie: InterfaceElement ie.name in DIAGRAM_OBJECTS {name: selection};
    }
    then {
        if (checkSAI({selection: selection, action: "ButtonPressed", input: -1})) {
            modify(p, "selectedFromBody", selection);
            setStep1BodySelected(selection, true);
            halt();
        } else {
            backtrack();
        }
    }
}

rule SelectTransferToBody {
    when {
        p: Problem p.subgoal == "selectTransferBodies" && p.selectedFromBody
            && !p.selectedToBody {selectedFromBody: fromBody};
        ie: InterfaceElement ie.name in DIAGRAM_OBJECTS {name: selection};
        arrow: Arrow arrow.fromBody == fromBody && arrow.toBody == selection
            && !arrow.completed {toBody: toBody};
    }
    then {
        if (checkSAI({selection: selection, action: "ButtonPressed", input: -1})) {
            modify(p, "selectedToBody", selection);
            modify(p, "subgoal", "enterArrowEnergy");
            setStep1BodySelected(selection, true);
            assert(new TPA(arrow.name, "SetVisible", true));
            assert(new TPA(arrow.ieEnergyBox, "SetVisible", true));
            halt();
        } else {
            backtrack();
        }
    }
}

rule DuplicateSelectTransferToBody {
    when {
        p: Problem p.subgoal == "selectTransferBodies" && p.selectedFromBody
            && !p.selectedToBody {selectedFromBody: fromBody};
        ie: InterfaceElement ie.name in DIAGRAM_OBJECTS {name: selection};
        arrow: Arrow arrow.fromBody == fromBody && arrow.toBody == selection
            && arrow.completed;
    }
    then {
        // Note: making this an error step because if not, the unlock TPA
        // doesn't behave correctly.  Likely a bug.
        if (checkSAI({selection: selection, action: "ButtonPressed", input: -1}, null, true)) {
            // Reset the "from" selection
            modify(p, "selectedFromBody", null);
            setStep1BodySelected(fromBody, false);
            setSuccessOrBugMsg("This arrow is already done.");
            assert(new TPA(fromBody, "unlock"));
            assert(new TPA(selection, "unlock"));
            halt();
        } else {
            backtrack();
        }
    }
}

// Note: Point of improvements here. There are different reasons of why there's
// no transfer between two bodies, e.g. model assumes sun energy passes through
// atmosphere 100%, and atmosphere absorbs other radiations 100%.
// Can differentiate them in different rules and give tailored feedback.
rule BuggySelectTransferToBody {
    when {
        p: Problem p.subgoal == "selectTransferBodies" && p.selectedFromBody
            && !p.selectedToBody {selectedFromBody: fromBody};
        ie: InterfaceElement ie.name in DIAGRAM_OBJECTS {name: selection};
        not(arrow: Arrow arrow.fromBody == fromBody && arrow.toBody == selection);
    }
    then {
        if (checkSAI({selection: selection, action: "ButtonPressed", input: -1}, null, true)) {
            // Reset the "from" selection
            modify(p, "selectedFromBody", null);
            setStep1BodySelected(fromBody, false);
            setSuccessOrBugMsg("There's no energy transfer from " + fromBody + " to " + selection + " in this model.");
            assert(new TPA(fromBody, "unlock"));
            assert(new TPA(selection, "unlock"));
            halt();
        } else {
            backtrack();
        }
    }
}

rule EnterArrowEnergy {
    when {
        p: Problem p.subgoal == "enterArrowEnergy" && p.selectedFromBody
            && selectedToBody {selectedFromBody: fromBody, selectedToBody: toBody};
        arrow: Arrow arrow.fromBody == fromBody && arrow.toBody == toBody;
        ie: InterfaceElement ie.name == arrow.ieEnergyBox {name: selection};
    }
    then {
        if (checkSAI({selection: selection, action: "UpdateComboBox", input: arrow.energy})) {
            modify(p, "subgoal", "selectTransferBodies");
            modify(p, "selectedFromBody", null);
            modify(p, "selectedToBody", null);
            modify(arrow, "completed", true);
            assert(new TPA(arrow.ieEnergyBox, "SetVisible", false));
            assert(new TPA(arrow.ieEnergyText, "SetVisible", true));
            assert(new TPA(fromBody, "unlock"));
            assert(new TPA(toBody, "unlock"));
            setStep1BodySelected(toBody, false);
            setStep1BodySelected(fromBody, false);
            halt();
        } else {
            backtrack();
        }
    }
}

rule ConfirmIdentifiedAllTransfers {
    when {
        p: Problem p.subgoal == "selectTransferBodies";
        not(arrow: Arrow !arrow.completed);
    }
    then {
        if (checkSAI({selection: "step1-finish", action: "ButtonPressed", input: -1})) {
            setSuccessOrBugMsg("Great, you have identified all the energy transfers.");
            modify(p, "subgoal", "goToStep2");
            assert(new TPA("step1-finish", "SetVisible", false));
            assert(new TPA("step1-go-to-step2", "SetVisible", true));
            halt();
        } else {
            backtrack();
        }
    }
}

rule BuggyConfirmIdentifiedAllTransfers {
    when {
        p: Problem p.subgoal == "selectTransferBodies";
        arrow: Arrow !arrow.completed;
    }
    then {
        if (checkSAI({selection: "step1-finish", action: "ButtonPressed", input: -1}, null, true)) {
            setSuccessOrBugMsg("I'm sorry, but you haven't identified all the transfers.");
            backtrack();
        } else {
            backtrack();
        }
    }
}

rule AdvanceFromStep1ToStep2 {
    when {
        p: Problem p.subgoal == "goToStep2";
    }
    then {
        if (checkSAI({selection: "step1-go-to-step2", action: "ButtonPressed", input: -1})) {
            modify(p, "subgoal", "selectControlVolume");
            // modify HTML
            switchToTab(2);
            setupStep2();

            // Debug: skip steps
            if (DEBUG_STEP > 2) {
                fakeCompleteStep2(p);
            }

            halt();
        } else {
            backtrack();
        }
    }
}

//////////////////////////
//        Step 2        //
//////////////////////////

rule SelectControlVolume {
    when {
        p: Problem p.subgoal == "selectControlVolume" && !p.selectedControlVolume
            {currentEquationRow: row};
        volume: ControlVolumeElement !volume.completed {name: selection};
    }
    then {
        if (checkSAI({selection: selection, action: "ButtonPressed", input: -1})) {
            modify(p, "selectedControlVolume", selection);
            modify(p, "subgoal", "selectInAndOutArrows");

            setStep2ControlVolumeSelected(selection, true);

            // Put volume label in table
            let rowLabel = {
                [CV_LAYER1] : "Layer 1",
                [CV_LAYER2] : "Layer 2",
                [CV_SURFACE] : "Surface"
            }[selection];

            assert(new TPA("table-row-label-" + row, "UpdateTextField", rowLabel));

            setStep2ControlVolumesSelectable(false);
            setStep2ArrowsSelectable(true);

            halt();
        } else {
            backtrack();
        }
    }
}

rule SelectArrowForControlVolume {
    when {
        p: Problem p.subgoal == "selectInAndOutArrows" && p.selectedControlVolume
            {currentEquationRow: row};
        volume: ControlVolumeElement volume.name == p.selectedControlVolume &&
            !volume.completed;
        equation: BalanceEquation equation.name == volume.name;
        arrow: Arrow arrow.name in equation.allArrows {name: selection};
    }
    then {
        if (checkSAI({selection: selection, action: "ButtonPressed", input: -1})) {
            setStep2ArrowSelected(selection, true);
            let arrows = p.currentSelectedArrows.slice();
            arrows.push(selection);
            modify(p, "currentSelectedArrows", arrows);

            // check if this volume is completed, set it if so
            if (arrows.length == equation.allArrows.length) {
                modify(volume, "completed", true);
                modify(p, "subgoal", "confirmCompletedControlVolume")
            }

            let [inEquation, outEquation] = renderEquations(arrows, equation);
            assert(new TPA("table-row-energy-in-" + row, "UpdateTextField", inEquation));
            assert(new TPA("table-row-energy-out-" + row, "UpdateTextField", outEquation));

            halt();
        } else {
            backtrack();
        }
    }
}

rule BuggySelectArrowForControlVolume {
    when {
        p: Problem p.subgoal == "selectInAndOutArrows" && p.selectedControlVolume;
        volume: ControlVolumeElement volume.name == p.selectedControlVolume &&
            !volume.completed;
        equation: BalanceEquation equation.name == volume.name;
        arrow: Arrow arrow.name notIn equation.allArrows {name: selection};
    }
    then {
        if (checkSAI({selection: selection, action: "ButtonPressed", input: -1}, null, true)) {
            setSuccessOrBugMsg("This arrow doesn't go in or out of the control volume you're working on.");
            halt();
        } else {
            backtrack();
        }
    }
}

rule ConfirmCompletedControlVolume {
    when {
        p: Problem p.subgoal == "confirmCompletedControlVolume" && p.selectedControlVolume;
        volume: ControlVolumeElement volume.name == p.selectedControlVolume &&
            volume.completed {name: selection};
        equation: BalanceEquation equation.name == volume.name {allArrows: arrows};
    }
    then {
        if (checkSAI({selection: "step2-thats-all", action: "ButtonPressed", input: -1})) {
            modify(p, "subgoal", "addEquationOrSolve");
            modify(p, "currentSelectedArrows", []);
            modify(p, "selectedControlVolume", null);

            // Change buttons
            assert(new TPA("add-equation", "unlock"));
            $("#step2-thats-all").hide();
            $("#add-equation").show();

            // Reset diagram
            for (let arrow of arrows) {
                assert(new TPA(arrow, "unlock"));
                setStep2ArrowSelected(arrow, false);
            }
            setStep2ControlVolumeSelected(selection, false);
            setStep2ArrowsSelectable(false);
            $("#" + selection).hide();

            halt();
                // Stopping here for now...
                // setSuccessOrBugMsg("You've got all the arrows for this control volume.  Unfortunately, the tutor is only completed this far, so please click the Done button.");
        } else {
            backtrack();
        }
    }
}

rule AddEquationRow {
    when {
        p: Problem p.subgoal == "addEquationOrSolve" {currentEquationRow: row};
        volume: ControlVolumeElement !volume.completed;
    }
    then {
        if (checkSAI({selection: "add-equation", action: "ButtonPressed", input: -1})) {
            modify(p, "subgoal", "selectControlVolume");
            modify(p, "currentEquationRow", row + 1);

            setStep2ControlVolumesSelectable(true);

            // Change buttons
            assert(new TPA("step2-thats-all", "unlock"));
            $("#step2-thats-all").show();
            $("#add-equation").hide();

            // Show the next row. Note: although "next row" seems like row + 1,
            // currentEquationRow is 1-based while js is 0-based
            $(".step2-table-row").eq(row).show();

            halt();
        } else {
            backtrack();
        }
    }
}

rule ConfirmHasEnoughEquationsToSolve {
    when {
        p: Problem p.subgoal == "addEquationOrSolve" && p.currentEquationRow >= 3;
    }
    then {
        if (checkSAI({selection: "solve-equations", action: "ButtonPressed", input: -1})) {
            modify(p, "subgoal", "goToStep3");

            // UI change to show solved equation & next button to Step 3.
            $("#step2-answer-box").show();
            assert(new TPA("step2-go-to-step3", "SetVisible", true));

            highlightEntireDiagram();

            halt();
        } else {
            backtrack();
        }
    }
}

rule BuggyConfirmHasEnoughEquationsToSolve {
    when {
        p: Problem p.subgoal == "addEquationOrSolve" && p.currentEquationRow < 3;
    }
    then {
        if (checkSAI({selection: "solve-equations", action: "ButtonPressed", input: -1}, null, true)) {
            let mathTs = "<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><msub><mi>T</mi><mi>S</mi></msub></mrow></math>";
            setSuccessOrBugMsg("We don't have enough equations to solve for " + mathTs + " yet.");
            backtrack();
        }
    }
}

rule AdvanceFromStep2ToStep3 {
    when {
        p: Problem p.subgoal == "goToStep3";
    }
    then {
        if (checkSAI({selection: "step2-go-to-step3", action: "ButtonPressed", input: -1})) {
            // modify(p, "subgoal", "");

            // TODO: modify HTML
            switchToTab(3);
            // setupStep3();

            halt();
        } else {
            backtrack();
        }
    }
}

// Temporarily for now, we're done when we fill in the first equation.
rule Done {
    when {
        not(volume: ControlVolumeElement !volume.completed);
    }
    then {
        if (checkSAI({selection: "done", action: "ButtonPressed", input: -1})) {
            halt();
        }
        assert(new Hint("Please click the Done button."));
    }
}
