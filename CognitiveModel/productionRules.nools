import("types.nools");

rule Bootstrap {
    when {
        bool : Boolean bool == false from false;
    }
    then {
        // Interface elements
        let sunButton = assert(new InterfaceElement("sun-button"));
        let layer2Button = assert(new InterfaceElement("layer2-button"));
        let layer1Button = assert(new InterfaceElement("layer1-button"));
        let surfaceButton = assert(new InterfaceElement("surface-button"));
        
        // Create Problem and Options
        // let option1 = assert(new Option(givenOption1.label,
        //                                 [givenOption1.amount, givenOption1.cost],
        //                                 [ieOption1amt.name, ieOption1cost.name, ieOption1end.name, ieOption1radio.name]));

        // let option2 = assert(new Option(givenOption2.label,
        //                                 [givenOption2.amount, givenOption2.cost],
        //                                 [ieOption2amt.name, ieOption2cost.name, ieOption2end.name, ieOption2radio.name]));

        // assert(new Problem(unit,
        //                    factor,
        //                    multiple,
        //                    moreBetter,
        //                    [option1.name, option2.name],
        //                    commonAmountIE.name));


        setProblemAttribute("use_backtracking", true);
        setProblemAttribute("prune_old_activations", true);
        // setProblemAttribute("substitute_input", true);
        halt();
    }
}
